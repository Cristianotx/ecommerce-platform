"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResultKind = void 0;
exports.getExtraArgs = getExtraArgs;
const architect_1 = require("@angular-devkit/architect");
const path = require("path");
const angular_memory_plugin_1 = require("./plugins/angular-memory-plugin");
const esbuild_downlevel_plugin_1 = require("./plugins/esbuild-downlevel-plugin");
const devkit_1 = require("./devkit");
var ResultKind;
(function (ResultKind) {
    ResultKind[ResultKind["Failure"] = 0] = "Failure";
    ResultKind[ResultKind["Full"] = 1] = "Full";
    ResultKind[ResultKind["Incremental"] = 2] = "Incremental";
    ResultKind[ResultKind["ComponentUpdate"] = 3] = "ComponentUpdate";
})(ResultKind || (exports.ResultKind = ResultKind = {}));
process.env['VITE_CJS_IGNORE_WARNING'] = 'true';
async function* vitestApplicationBuilder(options, context) {
    process.env['TEST'] = 'true';
    process.env['VITEST'] = 'true';
    const { buildApplicationInternal, angularVersion } = await (0, devkit_1.getBuildApplicationFunction)();
    const { startVitest } = await Function('return import("vitest/node")')();
    const projectConfig = await context.getProjectMetadata(context.target);
    const extraArgs = await getExtraArgs(options);
    const workspaceRoot = context.workspaceRoot;
    const projectRoot = projectConfig['root'];
    const setupFile = path.relative(projectRoot, options.setupFile);
    const config = {
        root: `${projectRoot || '.'}`,
        watch: options.watch === true,
        config: options.configFile,
        setupFiles: [setupFile],
        globals: true,
        pool: 'vmThreads',
        reporters: ['default'],
        environment: 'jsdom',
        exclude: options?.exclude || [],
        ...extraArgs,
    };
    const includes = findIncludes({
        workspaceRoot,
        projectRoot,
        include: options.include,
        exclude: options.exclude || [],
    });
    const testFiles = [
        path.relative(workspaceRoot, options.setupFile),
        ...includes.map((inc) => path.relative(workspaceRoot, inc)),
    ];
    const entryPoints = generateEntryPoints({
        projectRoot: projectRoot,
        testFiles,
        context,
        angularVersion,
    });
    const outputFiles = new Map();
    const viteConfig = {
        plugins: [
            (await (0, angular_memory_plugin_1.createAngularMemoryPlugin)({
                angularVersion,
                workspaceRoot,
                outputFiles,
            })),
            await (0, esbuild_downlevel_plugin_1.esbuildDownlevelPlugin)(),
        ],
    };
    let server;
    for await (const buildOutput of buildApplicationInternal({
        aot: false,
        index: false,
        progress: false,
        prerender: false,
        optimization: false,
        outputPath: `.angular/.vitest/${projectConfig['name']}`,
        outExtension: 'mjs',
        outputHashing: 2, // None
        tsConfig: path.relative(workspaceRoot, options.tsConfig),
        watch: options.watch === true,
        entryPoints,
        allowedCommonJsDependencies: ['@analogjs/vitest-angular/setup-zone'],
        sourceMap: {
            scripts: true,
            styles: false,
            vendor: false,
        },
    }, context)) {
        if (buildOutput.kind === ResultKind.Failure) {
            return { success: false };
        }
        else if (buildOutput.kind === ResultKind.Incremental ||
            buildOutput.kind === ResultKind.Full) {
            if (buildOutput.kind === ResultKind.Full) {
                outputFiles.clear();
                Object.keys(buildOutput.files).forEach((key) => {
                    outputFiles.set(key, buildOutput.files[key]);
                });
            }
            else {
                Object.keys(buildOutput.files).forEach((key) => {
                    outputFiles.set(key, buildOutput.files[key]);
                });
            }
        }
        if (options.watch) {
            if (!server) {
                server = await startVitest('test', [], config, viteConfig);
            }
            else {
                await server.start([]);
            }
            yield { success: true };
        }
        else {
            server = await startVitest('test', [], config, viteConfig);
            const success = server?.state.getCountOfFailedTests() === 0;
            yield { success };
        }
    }
    yield { success: true };
}
async function getExtraArgs(options) {
    // support passing extra args to Vitest CLI
    const schema = await Promise.resolve().then(() => require('./schema.json'));
    const extraArgs = {};
    for (const key of Object.keys(options)) {
        if (!schema.properties[key]) {
            extraArgs[key] = options[key];
        }
    }
    return extraArgs;
}
function findIncludes(options) {
    const fg = require('fast-glob');
    const { normalizePath } = require('vite');
    const projectRoot = normalizePath(path.resolve(options.workspaceRoot, options.projectRoot));
    const globs = [...options.include.map((glob) => `${projectRoot}/${glob}`)];
    return fg.sync(globs, {
        dot: true,
        ignore: options.exclude,
    });
}
function generateEntryPoints({ projectRoot, testFiles, context, angularVersion, }) {
    if (angularVersion < 19) {
        return testFiles;
    }
    const seen = new Set();
    return new Map(Array.from(testFiles, (testFile) => {
        const relativePath = path
            .relative(testFile.startsWith(projectRoot)
            ? projectRoot
            : context.workspaceRoot, testFile)
            .replace(/^[./]+/, '_')
            .replace(/\//g, '-');
        let uniqueName = `spec-${path.basename(relativePath, path.extname(relativePath))}`;
        let suffix = 2;
        while (seen.has(uniqueName)) {
            uniqueName = `${relativePath}-${suffix}`;
            ++suffix;
        }
        seen.add(uniqueName);
        return [uniqueName, testFile];
    }));
}
exports.default = (0, architect_1.createBuilder)(vitestApplicationBuilder);
//# sourceMappingURL=data:application/json;base64,